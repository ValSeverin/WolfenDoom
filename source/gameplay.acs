// Map checks/actions //
// Special mission numbers - force a level number to map to a specific mission number
#define SPECIAL_MISSION_COUNT 2
int special_mission_numbers[SPECIAL_MISSION_COUNT][2] = {
	{103, -1},
	{104, -1},
};

// Set mission/briefing number
script "MissionNumber" OPEN
{
	bool special_misnum = false;
	int mapnum = GetLevelInfo(LEVELINFO_LEVELNUM);

	for (int i = 0; i < SPECIAL_MISSION_COUNT; i++)
	{
		if (mapnum == special_mission_numbers[i][0])
		{
			if (special_mission_numbers[i][1] == -1)
			{
				// If the target mission number is -1, don't change the mission number
				Terminate;
			}
			mission_number = special_mission_numbers[i][1];
			special_misnum = true;
		}
	}

	if (mapnum > 150 && mapnum < 154) { Terminate; }

	if (!special_misnum) {
		if (mapnum < 99) // If it's not a secret mission or the intermap
		{
			mission_number = mapnum; // Set the mission number just in case we warped/started ahead
		}
		else if (mapnum > 100 && mapnum < 200)
		{
			mission_number = ((mapnum - 100) * 6) - 1; // Secret mission
		}
		else if (mapnum > 200)
		{
			// GZDoom does not accept multiple maps with the same number
			mission_number = mapnum % 100;
		}
	}

	int chapter = 0;

	if (mission_number)
	{
		if (mission_number <= 6) { chapter = 1; }
		else if (mission_number <= 12) { chapter = 2; }
		else if (mission_number <= 18) { chapter = 3; }

		if (chapter != 0) { ScriptCall("MapStatsHandler", "SetChapter", chapter); }
	}

	/*
	Print(
		s:"Mission number: ", d:mission_number,
		s:"\nmapnum: ", d:mapnum
	);
	*/
}

//fadescript for map setup
script "Maplaunch" ENTER
{
	FadeRange(0,0,0,1.0,0,0,0,0.0,1.5);
	TakeInventory("IncomingMessage", 999999);
}

//autosaves
script "Autosave" (void)
{
	Autosave();
}

//common end map
script "ChangeMap" (void)
{
	Exit_Normal(0);
}

//Clear inventory in order to avoid potential map breakers with chosen items, this exists mainly for DisguiseFailToken --ozy81
//see https://github.com/Realm667/WolfenDoom/issues/281#issuecomment-687553459
script "FixTokens" (void)
{
	TakeInventory("DisguiseFailToken",9999);
	TakeInventory("RadioPickup",9999);
	TakeInventory("TurretHeatAmmo",9999);
	TakeInventory("TurretBulletAmmo",9999);
}

//mxd. Mutants despawn checks
script "DisableMutants" (void)
{
	if(disable_mutants) Thing_Remove(0);
}

script "DisableBigMutants" (void)
{
	if(disable_big_mutants) Thing_Remove(0);
}

script "DisableSuperMutants" (void)
{
	if(disable_supermutants) Thing_Remove(0);
}

//Teleportscript from Re-Exhumed
script "ExTeleportPlayer" (int teleportID, int destinationID)
{
	int deltaX = GetActorX(playerID) - GetActorX(teleportID);
	int deltaY = GetActorY(playerID) - GetActorY(teleportID);
	//mxd. Warp won't work here, because the activator is ExTeleportIfPlayerBelow or ExTeleportIfPlayerAbove and not a player.
	//mxd. This kinda limits Warp usefulness, dont you think?..
	SetActorPosition(playerID, GetActorX(destinationID) + deltaX, GetActorY(destinationID) + deltaY, GetActorZ(playerID), false);
}

script "ExGetPlayerZ" (void)
{
	SetResultValue(GetActorZ(playerID) >> 16);
}

//Clear Inventory - now added Astrostein stuff (Ozy81)
script "CLEAR INVENTORY"(void)
{
	TakeInventory("KnifeSilent", 9999); //All ammo and weapons (aside from the knife) should now be handled by my EventHandler - Ed
	TakeInventory("BoABlueKey",1);
	TakeInventory("BoAYellowKey",1);
	TakeInventory("BoARedKey",1);
	TakeInventory("BoACyanKey",1);
	TakeInventory("BoAGreenKey",1);
	TakeInventory("BoAPurpleKey",1);
	TakeInventory("AstroBlueKey",1); //Astros
	TakeInventory("AstroYellowKey",1); //Astros
	TakeInventory("AstroRedKey",1); //Astros
	TakeInventory("Akten",1);
	TakeInventory("AktenV2",1);
	TakeInventory("RepairKit",9999); //make sure that more than 1 is taken to not fool objectives between HQs and missions --Ozy81
	TakeInventory("CutsceneEnabled", 1);
}

Script "QuickKick" (void)
{
	If (
		(CheckInventory("Stamina") < 30) ||
		(GetSpeed(0) > 30) ||
		(GetActorViewHeight(0) >> 16 < 56) ||
		(GetLevelInfo(LEVELINFO_LEVELNUM)==99) //let's remove the kick while on HQs - ozy81
	)
		Terminate; //No kicking unless you have stamina, aren't walking, and aren't crouching

	ScriptCall("BoAPlayer", "DoKick");
}

//death script
script "OhNoes!" DEATH
{
	if (CheckInventory("CutsceneEnabled")) { Terminate; }

	bool generic;
	int levelnum = GetLevelInfo(LEVELINFO_LEVELNUM);

	if (levelnum >= 151 && levelnum <= 153) { generic = true; }

	SetHudSize(320, 240, true);

	int fadetime = 1.5;

	if (!generic)
	{
		LocalSetMusic("THEEND");
		fadetime = 6.0;
	}

	SetFont("fade");
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1000, CR_UNTRANSLATED, 160.0, 120.0, 999999.0, fadetime, 1.0);

	// [ZK] If you resurrect, the death screen should disappear immediately
	for (int i = 0; i < 35*6; i++)
	{
		Delay(1);

		if (GetActorProperty(0, APROP_HEALTH) > 0)
		{
			SetFont("fade");
			HudMessage(s:""; HUDMSG_PLAIN, -1000, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
			LocalSetMusic("*");
			terminate;
		}
	}

	if (!generic)
	{
        sethudsize(160,120,1);
        setfont("BIGFONT");
        hudmessage(l:"DEATH"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1001, CR_RED, 80.0, 60.0, 999999.0, 3.0, 1.0);
        SetHudSize(320, 240, true); //reset dimensions
	}

	// [ZK] Delay 1 tic instead of 35
	while(GetActorProperty(0,APROP_HEALTH) <= 0) Delay(1);

	//fadeback if resurrected
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1001, CR_UNTRANSLATED, 160.0, 120.0, 0.0, 0.0, 0.25);
	SetFont("fade");
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1000, CR_UNTRANSLATED, 160.0, 120.0, 0.0, 0.0, 1.0);

	// [ZK] restore music
	LocalSetMusic("*");
}

///////////////////////////////////////////////////////
//GENERAL MAPS SCRIPTS, DUKE3D-LIKE INTERACTIONS HERE//
///////////////////////////////////////////////////////

//Generic vent breaker script
script "VENT_BREAK" (int vent_id)
{
	SetLineBlocking(vent_id,BLOCK_NOTHING);
	SetLineTexture(vent_id, LINE_BACK, TEXTURE_MIDDLE, "VENT_M00");
	SetLineTexture(vent_id, LINE_FRONT, TEXTURE_MIDDLE, "VENT_M00");
	Thing_Activate(vent_id);
}

//Generic Flush Sound WC
script "WC_FLUSH" (int toilet_id)
{
	PlaySound(toilet_id,"toilet/flush",CHAN_BODY,1.0,0,0);
}

//Generic Mirror Script
script "MIRRORS" (int line_id)
{
	TranslucentLine(line_id,255);
	GlassBreak(0);
	SetLineTexture(line_id,SIDE_FRONT,TEXTURE_MIDDLE,"MIRR_W04");
}

//Generic Light Script
script "LIGHTS" (int light_tid)
{
	if(!GetActorProperty(light_tid,APROP_Dormant))
		Thing_Deactivate(light_tid);
	else
		Thing_Activate(light_tid);
	PlaySound(0,"SW_LIGHT");
}

//Generic Light Script with no sound, for objects like creepycandle and so on
script "LIGHTS_NOSOUND" (int light_tid)
{
	if(!GetActorProperty(light_tid,APROP_Dormant))
		Thing_Deactivate(light_tid);
	else
		Thing_Activate(light_tid);
}

// Compatibility placeholders (old functions that aren't needed any more, but might be referenced in old maps)
script "BossHealth" (void) {}

// Commander Keen bridge movement script
//
// Uses absolute values rather than sector height offsets so that even if a bridge does
// somehow get stuck, re-activating the use line will eventually fix the placement.
script "BridgeScript" (int bridge_id, int destheight)
{
	if (bridge_id > BRIDGECOUNT) { Terminate; } // Don't overflow the bridge status array

	// If the bridge is on-screen, override the passed-in height and move it away.  otherwise, use the passed in height
	if (bridgestatus[bridge_id]) { destheight = 10000; } // Default height to hold the bridge off-screen (above the general map ceiling height)

	// Toggle the bridge status
	bridgestatus[bridge_id] = !bridgestatus[bridge_id];

	// Move the bridge to the set destination height
	MoveBridge(bridge_id, destheight);
}

function void MoveBridge(int bridge_id, int destheight)
{
	int bridgeheight = 16; // Height of bridges (desired difference between floor and ceiling of 3D floor sector)

	if (GetSectorCeilingZ(bridge_id, 0, 0) > destheight * 1.0) // If currently higher than destination, move floor first
	{
		Floor_MoveToValue(bridge_id, 0x7FFFFFFF, destheight - bridgeheight);
		Ceiling_MoveToValue(bridge_id, 0x7FFFFFFF, destheight);
	}
	else // Otherwise, move ceiling first
	{
		Ceiling_MoveToValue(bridge_id, 0x7FFFFFFF, destheight);
		Floor_MoveToValue(bridge_id, 0x7FFFFFFF, destheight - bridgeheight);
	}
}